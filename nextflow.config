manifest {
    nextflowVersion = '!>=23.04.0'
    mainScript = "main.nf"
}

plugins {
  id 'nf-validation'
}

params {
    ref_genome_folder = ""
    metaeuk_folder    = ""
    galba_folder      = ""
    braker_folder     = ""
    busco_db          = ""
    outdir            = "results"

    publish_dir_mode  = 'copy'
}

includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'
includeConfig 'conf/codon.config'

profiles {

    local {
         params {
            workdir = "work"
            outdir = "results"
            busco_db = "/Users/kates/Desktop/EBI/MGnify/pipelines/microeuks-gene-benchmarker/tests/data/busco_db/busco_fake"
         }
         docker {
            enabled = true
            autoMounts = true
            registry = 'quay.io'
            userEmulation = true
            runOptions = "--platform linux/x86_64"
        }
        executor {
            name = "local"
            cpus = 2
            memory = '1 GB'
        }
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}